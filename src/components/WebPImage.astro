---
export interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  loading?: 'lazy' | 'eager';
  class?: string;
  style?: string;
}

const { src, alt, width, height, loading = 'lazy', class: className, style } = Astro.props;

// Generate WebP and fallback paths
function getImagePaths(originalSrc: string) {
  // Remove leading slash if present
  const cleanSrc = originalSrc.startsWith('/') ? originalSrc.slice(1) : originalSrc;
  
  // Extract path components
  const lastDotIndex = cleanSrc.lastIndexOf('.');
  const basePath = cleanSrc.substring(0, lastDotIndex);
  const extension = cleanSrc.substring(lastDotIndex);
  
  return {
    webp: `/${basePath}.webp`,
    fallback: `/${cleanSrc}`
  };
}

const { webp, fallback } = getImagePaths(src);
---

<picture>
  <!-- WebP version for modern browsers -->
  <source srcset={webp} type="image/webp" />
  
  <!-- Fallback for older browsers -->
  <img 
    src={fallback}
    alt={alt}
    width={width}
    height={height}
    loading={loading}
    class={className}
    style={style}
  />
</picture>

<style>
  picture {
    display: contents;
  }
  
  img {
    max-width: 100%;
    height: auto;
  }
</style>
